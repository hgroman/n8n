{
  "name": "friendly-competitor-spy",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "labelIds": [
            "Label_1688379935863361814"
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -288,
        -224
      ],
      "id": "e0ad794c-e28b-4cf6-88aa-4dcd9ea25c44",
      "name": "Get many messages",
      "credentials": {
        "gmailOAuth2": {
          "id": "mcOhyAgPtYo02OkR",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Email Parser & Domain Extractor - REVISED AND CORRECTED\nreturn $input.all().map(item => {\n  const json = item.json;\n  let text = '';\n  let extractionMethod = 'none';\n\n  // --- 1. Extract readable email text ---\n  // This logic correctly checks for text, html, or a snippet.\n  if (json.text && typeof json.text === 'string' && json.text.trim()) {\n    text = json.text.trim();\n    extractionMethod = 'direct_text_field';\n  } else if (json.textAsHtml && typeof json.textAsHtml === 'string' && json.textAsHtml.trim()) {\n    // A simple but effective way to strip HTML tags for clean text.\n    text = json.textAsHtml.replace(/<[^>]+>/g, ' ').replace(/\\s+/g, ' ').trim();\n    extractionMethod = 'textAsHtml_stripped';\n  } else if (json.snippet && typeof json.snippet === 'string' && json.snippet.trim()) {\n    text = json.snippet.trim();\n    extractionMethod = 'snippet_fallback';\n  } else {\n    // If no content is found, set a clear message.\n    text = '(No readable email content found)';\n    extractionMethod = 'failed';\n  }\n\n  // --- 2. Extract sender info and domain ---\n  // This logic correctly handles the nested object structure for the 'from' field.\n  let sender = 'Unknown sender';\n  let senderDomain = 'unknown';\n  \n  // Safely access the nested address property using optional chaining.\n  const address = json.from?.value?.[0]?.address;\n\n  if (address && typeof address === 'string') {\n    sender = address;\n    // Extract domain from the address string.\n    const domainMatch = sender.match(/@(.+)/);\n    if (domainMatch && domainMatch[1]) {\n      senderDomain = domainMatch[1];\n    }\n  }\n\n  // --- 3. Return the complete and corrected payload ---\n  return {\n    json: {\n      ...json, // Preserve all original Gmail fields\n      email_text: text, // Clean, readable email content\n      extraction_method: extractionMethod, // How we got the text (for debugging)\n      text_length: text.length, // Content length (for monitoring)\n      sender: sender, // The full sender email address\n      senderDomain: senderDomain // Just the domain part\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -32,
        -224
      ],
      "id": "0ca83dc1-e94b-4dfe-9b79-6c9c2860bde2",
      "name": "Email Parser & Domain Extractor"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "o4-mini-2025-04-16",
          "mode": "list",
          "cachedResultName": "O4-MINI-2025-04-16"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this competitor email for key intelligence insights:\n\n**Email Details:**\n- From: {{$json[\"sender\"]}}\n- Subject: {{$json[\"subject\"]}}\n- Domain: {{$json[\"senderDomain\"]}}\n\n**Analysis Focus:**\nPlease extract and summarize:\n1. **Key Announcements**: New products, services, or features\n2. **Pricing Intelligence**: Any pricing changes, promotions, or cost information\n3. **Market Positioning**: How they're positioning themselves vs competitors\n4. **Strategic Insights**: What this reveals about their business direction\n5. **Actionable Intelligence**: Opportunities or threats for our business\n\n**Email Content:**\n{{$json[\"email_text\"]}}\n\n**Output Format:**\nProvide a concise but comprehensive analysis in markdown format with clear sections for each focus area above."
            }
          ]
        },
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        176,
        -224
      ],
      "id": "ab6c8bda-0c8f-4eaa-a28a-bc55da3a171d",
      "name": "AI Competitor Intelligence Analyzer",
      "credentials": {
        "openAiApi": {
          "id": "YmBILydZ1nPmlYvr",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Data Merger & AI Integration\n// Get the current OpenAI response\nconst aiResponse = $json;\n\n// Get the original parsed data from the Email Parser node\nconst original = $('Email Parser & Domain Extractor').first()?.json;\n\n// --- OPTIONAL ENHANCEMENT ---\n// Add a check to ensure the data was retrieved successfully\nif (!original) {\n  throw new Error(\"Could not retrieve data from 'Email Parser & Domain Extractor'. Check that the node name is correct.\");\n}\n// --- END ENHANCEMENT ---\n\n\n// --- START: REVISED AI SUMMARY EXTRACTION ---\n// Extract AI summary, safely handling both string and object responses\nlet aiSummary = '';\nconst messageContent = aiResponse.choices?.[0]?.message?.content;\n\n// Check if the AI response content is a plain string\nif (typeof messageContent === 'string') {\n  aiSummary = messageContent;\n} \n// Check if it's an object (like an error message from the AI)\nelse if (typeof messageContent === 'object' && messageContent !== null) {\n  // Convert the error object to a readable string for logging\n  aiSummary = `AI returned an error object: ${JSON.stringify(messageContent)}`;\n} \n// Standard fallbacks for other possible response structures\nelse if (aiResponse.content) {\n  aiSummary = aiResponse.content;\n} else if (aiResponse.text) {\n  aiSummary = aiResponse.text;\n} else if (typeof aiResponse === 'string') {\n  aiSummary = aiResponse;\n} \n// If all else fails\nelse {\n  aiSummary = 'AI summary extraction failed';\n}\n// --- END: REVISED AI SUMMARY EXTRACTION ---\n\n\n// Clean and validate the AI summary\n// This line will no longer fail because aiSummary is now always a string\naiSummary = aiSummary ? aiSummary.trim() : 'No AI analysis available';\n\n\n// Return merged data: original parsed fields + AI analysis\nreturn [{\n  json: {\n    ...original,                    // Now pulls sender, email_text, etc. from Node 2\n    ai_summary: aiSummary,          // The AI analysis\n    processing_timestamp: new Date().toISOString(),  // When this merge happened\n    ai_model: aiResponse.model || 'unknown'          // Which AI model was used\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        -224
      ],
      "id": "77adcdf7-94a3-4fab-90f2-c729f9465d4f",
      "name": "Data Merger & AI Integration"
    },
    {
      "parameters": {
        "operation": "createFromText",
        "content": "=---\ntags: [competitor-intel, email-analysis, {{ $json.senderDomain || 'unknown' }}]\ndate: {{ $now.format('YYYY-MM-DD') }}\ntime: {{ $now.format('HH:mm:ss') }}\nsource: email\nsender: {{ $json.sender || 'Unknown sender' }}\nsubject: \"{{ $json.subject || 'No subject' }}\"\ndomain: {{ $json.senderDomain || 'unknown' }}\nanalysis-date: {{ $now.format('YYYY-MM-DD HH:mm:ss') }}\nextraction-method: {{ $json.extraction_method || 'unknown' }}\ntext-length: {{ $json.text_length || 0 }}\n---\n\n# Competitor Intelligence: {{ $json.subject || 'Unknown Subject' }}\n\n## ðŸ“§ Email Details\n- **From:** {{ $json.sender || 'Unknown sender' }}\n- **Domain:** {{ $json.senderDomain || 'unknown' }}\n- **Date:** {{ $json.date || 'Unknown date' }}\n- **Subject:** {{ $json.subject || 'No subject' }}\n- **Content Length:** {{ $json.text_length || 0 }} characters\n- **Extraction Method:** {{ $json.extraction_method || 'unknown' }}\n\n## ðŸ¤– AI Competitive Analysis\n{{ $json.ai_summary || 'AI analysis not available' }}\n\n## ðŸ“„ Original Email Content\n{{ $json.email_text || 'Email content not available' }}\n\n---\n*Generated by n8n Competitor Intelligence Workflow*\n*Processing Time: {{ $json.processing_timestamp || $now.toISOString() }}*\n*AI Model: {{ $json.ai_model || 'unknown' }}*",
        "name": "={{ $now.setZone('America/Los_Angeles').toFormat('yyyy-MM-dd_HH-mm') }}_{{ ($json.subject || 'No Subject').replace(/[\\\\/:\"*?<>|]/g, '') }}.md",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1HP7Pii6-MrUr5R4Y3GGkIk84ReV6QQIc",
          "mode": "list",
          "cachedResultName": "Crows Nest",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1HP7Pii6-MrUr5R4Y3GGkIk84ReV6QQIc"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        800,
        -224
      ],
      "id": "e4769122-6661-4091-adb2-7c2ef374dd03",
      "name": "Competitor Intel File Creator",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "H8Yrve6IfFDWiRvw",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "markAsRead",
        "messageId": "={{ $('Get many messages').item.json.id }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1056,
        -224
      ],
      "id": "29f6ece2-e7bc-4b7b-a267-23cf25aa4023",
      "name": "Mark a message as read",
      "webhookId": "1b859862-b93e-46d5-83da-ae7262ce6b48",
      "credentials": {
        "gmailOAuth2": {
          "id": "mcOhyAgPtYo02OkR",
          "name": "Gmail account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Get many messages": {
      "main": [
        [
          {
            "node": "Email Parser & Domain Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Parser & Domain Extractor": {
      "main": [
        [
          {
            "node": "AI Competitor Intelligence Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Competitor Intelligence Analyzer": {
      "main": [
        [
          {
            "node": "Data Merger & AI Integration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Merger & AI Integration": {
      "main": [
        [
          {
            "node": "Competitor Intel File Creator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Competitor Intel File Creator": {
      "main": [
        [
          {
            "node": "Mark a message as read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c021df06-783d-4e7f-a184-c1b2e6b24096",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cf869fca64012e6561c3a8aa4a77e587700789bed025ef5a7dec1df660fab605"
  },
  "id": "aJncDEr9j9muTjM2",
  "tags": []
}